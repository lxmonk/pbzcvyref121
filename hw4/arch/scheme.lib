/* scheme.lib
 * Support for creating & manipulating Scheme objects in assembly
 *
 * Programmer: Mayer Goldberg, 2010
 */

#include "lib/scheme/types.inc"
#include "lib/scheme/make_sob_void.asm"
#include "lib/scheme/make_sob_nil.asm"
#include "lib/scheme/make_sob_bool.asm"
#include "lib/scheme/make_sob_char.asm"
#include "lib/scheme/make_sob_integer.asm"
#include "lib/scheme/make_sob_pair.asm"
#include "lib/scheme/make_sob_closure.asm"
#include "lib/scheme/make_sob_vector.asm"
#include "lib/scheme/make_sob_string.asm"

#include "lib/scheme/make_sob_symbol.asm"
#include "lib/scheme/make_sob_gensym.asm"
#include "lib/scheme/find_symbol.asm"

#include "lib/scheme/is_sob_void.asm"
#include "lib/scheme/is_sob_nil.asm"
#include "lib/scheme/is_sob_bool.asm"
#include "lib/scheme/is_sob_char.asm"
#include "lib/scheme/is_sob_integer.asm"
#include "lib/scheme/is_sob_pair.asm"
#include "lib/scheme/write_sob_void.asm"
#include "lib/scheme/write_sob_nil.asm"
#include "lib/scheme/write_sob_bool.asm"
#include "lib/scheme/write_sob_char.asm"
#include "lib/scheme/write_sob_integer.asm"
#include "lib/scheme/write_sob_pair.asm"
#include "lib/scheme/write_sob_closure.asm"
#include "lib/scheme/write_sob_string.asm"
#include "lib/scheme/write_sob_vector.asm"
#include "lib/scheme/write_sob.asm"
#include "lib/scheme/is_sob_true.asm"

{
 WRITE_SOB_GENSYM:
  MOV(R0, STARG(0)); /* R0 <- ptr to gensym */
  PUSH(FP);
  MOV(FP, SP);
  PUSH(INDD(R0, 1));
  PUSH(IMM('g'));
  CALL(PUTCHAR);
  DROP(1);
  CALL(WRITE_INTEGER);
  DROP(1);
  POP(FP);
  RETURN;
  
 WRITE_SOB_SYMBOL:
  MOV(R0, STARG(0)); /* R0 <- ptr to symbol */
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  MOV(R0, INDD(R0, 1));
  MOV(R1, INDD(R0, 1));
  MOV(R2, R0);
  ADD(R2, IMM(2));
 L_L_WSS_LOOP:
  CMP(R1, IMM(0));
  JUMP_EQ(L_L_WSS_EXIT);
  CMP(IND(R2), '\n');
  JUMP_EQ(L_L_WSS_NEWLINE);
  CMP(IND(R2), '\t');
  JUMP_EQ(L_L_WSS_TAB);
  CMP(IND(R2), '\f');
  JUMP_EQ(L_L_WSS_PAGE);
  CMP(IND(R2), '\r');
  JUMP_EQ(L_L_WSS_RETURN);
  CMP(IND(R2), '\\');
  JUMP_EQ(L_L_WSS_BACKSLASH);
  CMP(IND(R2), '\"');
  JUMP_EQ(L_L_WSS_DQUOTE);
  CMP(IND(R2), ' ');
  JUMP_LT(L_L_WSS_OCT_CHAR);
  PUSH(IND(R2));
  CALL(PUTCHAR);
  DROP(1);
  JUMP(L_L_WSS_LOOP_CONT);
 L_L_WSS_DQUOTE:
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  PUSH(IMM('\"'));
  CALL(PUTCHAR);
  DROP(2);
  JUMP(L_L_WSS_LOOP_CONT);
 L_L_WSS_BACKSLASH:
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  DROP(2);
  JUMP(L_L_WSS_LOOP_CONT);
 L_L_WSS_RETURN:
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  PUSH(IMM('r'));
  CALL(PUTCHAR);
  DROP(2);
  JUMP(L_L_WSS_LOOP_CONT);
 L_L_WSS_PAGE:
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  PUSH(IMM('f'));
  CALL(PUTCHAR);
  DROP(2);
  JUMP(L_L_WSS_LOOP_CONT);
 L_L_WSS_TAB:
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  PUSH(IMM('t'));
  CALL(PUTCHAR);
  DROP(2);
  JUMP(L_L_WSS_LOOP_CONT);  
 L_L_WSS_NEWLINE:
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  PUSH(IMM('n'));
  CALL(PUTCHAR);
  DROP(2);
  JUMP(L_L_WSS_LOOP_CONT);
 L_L_WSS_OCT_CHAR:
  MOV(R0, IND(R2));
  MOV(R3, R0);
  REM(R3, IMM(8));
  PUSH(R3);
  DIV(R0, IMM(8));
  MOV(R3, R0);
  REM(R3, IMM(8));
  PUSH(R3);
  DIV(R0, IMM(8));
  REM(R0, IMM(8));
  PUSH(R0);
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  DROP(1);
  CALL(WRITE_INTEGER);
  DROP(1);
  CALL(WRITE_INTEGER);
  DROP(1);
  CALL(WRITE_INTEGER);
  DROP(1);
 L_L_WSS_LOOP_CONT:
  INCR(R2);
  DECR(R1);
  JUMP(L_L_WSS_LOOP);
 L_L_WSS_EXIT:
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;
  

 VAL_L_SOB_SYMBOL: /* R0 has the ptr to symbol */
  CMP(INDD(R0, 2),0);
  JUMP_EQ(L_EXCEPTION_VAR_NOT_BOUND);
  MOV(R0, INDD(R0, 3));
  RETURN;

 L_EXCEPTION_VAR_NOT_BOUND:
/*  Exception: variable is not bound */
  OUT(IMM(2), IMM('E'));
  OUT(IMM(2), IMM('x'));
  OUT(IMM(2), IMM('c'));
  OUT(IMM(2), IMM('e'));
  OUT(IMM(2), IMM('p'));
  OUT(IMM(2), IMM('t'));
  OUT(IMM(2), IMM('i'));
  OUT(IMM(2), IMM('o'));
  OUT(IMM(2), IMM('n'));
  OUT(IMM(2), IMM(':'));
  OUT(IMM(2), IMM(' '));
  OUT(IMM(2), IMM('v'));
  OUT(IMM(2), IMM('a'));
  OUT(IMM(2), IMM('r'));
  OUT(IMM(2), IMM('i'));
  OUT(IMM(2), IMM('a'));
  OUT(IMM(2), IMM('b'));
  OUT(IMM(2), IMM('l'));
  OUT(IMM(2), IMM('e'));
  OUT(IMM(2), IMM(' '));
  PUSH(R0);
  CALL(WRITE_SOB_SYMBOL);
  DROP(1);
  OUT(IMM(2), IMM(' '));      
  OUT(IMM(2), IMM('i'));
  OUT(IMM(2), IMM('s'));
  OUT(IMM(2), IMM(' '));
  OUT(IMM(2), IMM('n'));
  OUT(IMM(2), IMM('o'));
  OUT(IMM(2), IMM('t'));
  OUT(IMM(2), IMM(' '));
  OUT(IMM(2), IMM('b'));
  OUT(IMM(2), IMM('o'));
  OUT(IMM(2), IMM('u'));
  OUT(IMM(2), IMM('n'));
  OUT(IMM(2), IMM('d'));


  CALL(NEWLINE);
  HALT;
}







