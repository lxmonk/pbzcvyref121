Scanner.stringToTokens "()";
print "0\n";
Scanner.stringToTokens "(a b c)";
print "1\n";
Scanner.stringToTokens "(a . b)";
print "2\n";
Scanner.stringToTokens "(define abs (lambda (x) (if (negative? x) (- x) x)))";
print "3\n";
Scanner.stringToTokens "#\\A";
print "4\n";
Scanner.stringToTokens "#\\space";
print "5\n";
Scanner.stringToTokens "#\\return";
print "6\n";
Scanner.stringToTokens "#\\newline";
print "7\n";
Scanner.stringToTokens "#\\tab";
print "8\n";
Scanner.stringToTokens ")(.";
print "9\n";
Scanner.stringToTokens "#(a b c)";
print "10\n";
Scanner.stringToTokens "#(a b . c)";
print "11\n";
Reader.stringToSexpr "(a)";
print "12\n";
Reader.stringToSexpr "(a b . c)";
print "13\n";
Reader.stringToSexpr "(define abs (lambda (x) (if (negative? x) (- x) x)))";
print "14\n";
Reader.stringToSexpr "#(a b c)";
print "15\n";
Reader.stringToSexpr "()";
print "16\n";
TagParser.stringToPE "x";
print "17\n";
TagParser.stringToPE "'x";
print "18\n";
TagParser.stringToPE "()";
print "19\n";
TagParser.stringToPE "'()";
print "20\n";
TagParser.stringToPE "#(1 2 3)";
print "21\n";
TagParser.stringToPE "'#(1 2 3)";
print "22\n";
TagParser.stringToPE "496351";
print "23\n";
TagParser.stringToPE "'496351";
print "24\n";
TagParser.stringToPE "''496351";
print "25\n";
TagParser.stringToPE "'''496351";
print "26\n";
TagParser.stringToPE "(define abs (lambda (x) (if (negative? x) (- x) x)))";
print "27\n";
(* TagParser.stringToPE "lambda"; *)
(* print "28\n"; *)
(* TagParser.stringToPE "define"; *)
(* print "29\n"; *)
(* TagParser.stringToPE "quote"; *)
(* print "30\n"; *)
TagParser.stringToPE "(lambda x x)";
print "31\n";
TagParser.stringToPE "(lambda (x) x)";
print "32\n";
TagParser.stringToPE "(lambda (x . rest) x)";
print "33\n";
TagParser.stringToPE "(begin (display \"foo\") (+ 2 3))";
print "34\n";
TagParser.stringToPE "(begin (display \"foo\"))";
print "35\n";
TagParser.stringToPE "(begin)";
print "36\n";
TagParser.stringToPE "(set! abc 234)";
print "37\n";
TagParser.stringToPE "(define a 3)";
print "38\n";
TagParser.stringToPE "(define (a) 3)";
print "39\n";
TagParser.stringToPE "(define (a b) 3)";
print "40\n";
TagParser.stringToPE "(define (a b . c) 3)";
print "41\n";
TagParser.stringToPE "(define (a . c) 3)";
print "42\n";
TagParser.stringToPE "(if E1 E2 E3)";
print "43\n";
TagParser.stringToPE "(if E1 E2 (if E3 E4 E5))";
print "44\n";
TagParser.stringToPE "(if E1 E2)";
print "45\n";
TagParser.stringToPE "(cond ((positive? a) 'positive) ((negative? a) 'negative) (else 'zero))";
print "46\n";
TagParser.stringToPE "(let ((a 3) (b 5)) (+ a b))";
print "47\n";
TagParser.stringToPE "(let* ((a 3) (b 5)) (+ a b))";
print "48\n";
TagParser.stringToPE "(letrec ((fact (lambda (n) (if (zero? n) 1 (* n (fact (- n 1))))))) (+ (fact 2) (fact 5)))";
print "49\n";
TagParser.stringToPE "(letrec ((even? (lambda (n) (if (zero? n) #t (odd? - n 1)))) (odd? (lambda (n) (if (zero? n) #f) (even? (- n 1))))) (and (even? x) (odd? y)))";
print "50\n";
TagParser.stringToPE "(define foo (lambda (x y) (define even? (lambda (n) (if (zero? n) #t (odd? - n 1)))) (define odd? (lambda (n) (if (zero? n) #f) (even? (- n 1)))) (and (even? x) (odd? y))))";
print "51\n";
TagParser.stringToPEs "(a b)";
print "52\n";
TagParser.stringToPEs "(define abs (lambda (x) (if (negative? x) (- x) x))) (+ (abs x) (abs y))";
print "53\n";
TagParser.stringToPEs "(and E1 E2) (or E1 E2 E3)";
print "54\n";
Reader.stringToSexpr "'(a . b)";
print "55\n";
Reader.stringToSexpr "(quote (a . b))";
print "56\n";
Reader.stringToSexpr "(a . (b . (c . ())))";
print "57\n";
Reader.stringToSexpr "(a b c)";
print "58\n";
Reader.stringToSexpr "(((a) . b) . c)";
print "59\n";
Reader.stringToSexpr "\"abc\"";
print "60\n";
Reader.stringToSexpr "'\"abc\"";
print "61\n";
TagParser.stringToPE "\"abc\"";
print "62\n";
TagParser.stringToPE "'\"abc\"";
print "63\n";
TagParser.stringToPE "(quote \"abc\")";
print "64\n";
Reader.stringToSexpr "#\\t";
print "65\n";
Reader.stringToSexpr "#t";
print "66\n";
(* Reader.stringToSexpr "#(1 2 3 . 5)"; *)
(* print "67\n"; *)
Reader.stringToSexpr "#(1 2 3 5)";
print "68\n";
Reader.stringToSexpr "#(() #() #(1 2) #\\A #\\newline (3 . a))";
print "69\n";
