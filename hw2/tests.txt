Scanner.stringToTokens "()";
Scanner.stringToTokens "(a b c)";
Scanner.stringToTokens "(a . b)";
Scanner.stringToTokens "(define abs (lambda (x) (if (negative? x) (- x) x)))";
Scanner.stringToTokens "#\\A";
Scanner.stringToTokens "#\\space";
Scanner.stringToTokens "#\\return";
Scanner.stringToTokens "#\\newline";
Scanner.stringToTokens "#\\tab";
Scanner.stringToTokens ")(.";
Scanner.stringToTokens "#(a b c)";
Scanner.stringToTokens "#(a b . c)";
Reader.stringToSexpr "(a)";
Reader.stringToSexpr "(a b . c)";
Reader.stringToSexpr "(define abs (lambda (x) (if (negative? x) (- x) x)))";
Reader.stringToSexpr "#(a b c)";
Reader.stringToSexpr "()";
TagParser.stringToPE "x";
TagParser.stringToPE "'x";
TagParser.stringToPE "()";
TagParser.stringToPE "'()";
TagParser.stringToPE "#(1 2 3)";
TagParser.stringToPE "'#(1 2 3)";
TagParser.stringToPE "496351";
TagParser.stringToPE "'496351";
TagParser.stringToPE "''496351";
TagParser.stringToPE "'''496351";
TagParser.stringToPE "(define abs (lambda (x) (if (negative? x) (- x) x)))";
TagParser.stringToPE "lambda";
TagParser.stringToPE "define";
TagParser.stringToPE "quote";
TagParser.stringToPE "(lambda x x)";
TagParser.stringToPE "(lambda (x) x)";
TagParser.stringToPE "(lambda (x . rest) x)";
TagParser.stringToPE "(begin (display \"foo\") (+ 2 3))";
TagParser.stringToPE "(begin (display \"foo\"))";
TagParser.stringToPE "(begin)";
TagParser.stringToPE "(set! abc 234)";
TagParser.stringToPE "(define a 3)";
TagParser.stringToPE "(define (a) 3)";
TagParser.stringToPE "(define (a b) 3)";
TagParser.stringToPE "(define (a b . c) 3)";
TagParser.stringToPE "(define (a . c) 3)";
TagParser.stringToPE "(if E1 E2 E3)";
TagParser.stringToPE "(if E1 E2 (if E3 E4 E5))";
TagParser.stringToPE "(if E1 E2)";
TagParser.stringToPE "(cond ((positive? a) 'positive) ((negative? a) 'negative) (else 'zero))";
TagParser.stringToPE "(let ((a 3) (b 5)) (+ a b))";
TagParser.stringToPE "(let* ((a 3) (b 5)) (+ a b))";
TagParser.stringToPE "(letrec ((fact (lambda (n) (if (zero? n) 1 (* n (fact (- n 1))))))) (+ (fact 2) (fact 5)))";
TagParser.stringToPE "(letrec ((even? (lambda (n) (if (zero? n) #t (odd? - n 1)))) (odd? (lambda (n) (if (zero? n) #f) (even? (- n 1))))) (and (even? x) (odd? y)))";
TagParser.stringToPE "(define foo (lambda (x y) (define even? (lambda (n) (if (zero? n) #t (odd? - n 1)))) (define odd? (lambda (n) (if (zero? n) #f) (even? (- n 1)))) (and (even? x) (odd? y))))";
TagParser.stringToPEs "(a b)";
TagParser.stringToPEs "(define abs (lambda (x) (if (negative? x) (- x) x))) (+ (abs x) (abs y))";
TagParser.stringToPEs "(and E1 E2) (or E1 E2 E3)";
Reader.stringToSexpr "'(a . b)";
Reader.stringToSexpr "(quote (a . b))";
Reader.stringToSexpr "(a . (b . (c . ())))";
Reader.stringToSexpr "(a b c)";
Reader.stringToSexpr "(((a) . b) . c)";
Reader.stringToSexpr "\"abc\"";
Reader.stringToSexpr "'\"abc\"";
TagParser.stringToPE "\"abc\"";
TagParser.stringToPE "'\"abc\"";
TagParser.stringToPE "(quote \"abc\")";
Reader.stringToSexpr "#\\t";
Reader.stringToSexpr "#t";
Reader.stringToSexpr "#(1 2 3 . 5)";
Reader.stringToSexpr "#(1 2 3 5)";
Reader.stringToSexpr "#(() #() #(1 2) #\\A #\\newline (3 . a))";
